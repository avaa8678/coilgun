#include <LiquidCrystal_I2C.h>// include the library code

const byte speedometer1 = 2; //digital pin 2 
const byte speedometer2 = 3; // digital pin 3
             
long time2 = 0; 
long time1 = 0;

double LENGTH = 0.0128; //length of the magnet

LiquidCrystal_I2C lcd(0x27, 16, 2); // set up lcd panel

void setup() {
  pinMode(speedometer1, INPUT); //set photogate 1 as an input
  pinMode(speedometer2, INPUT); //set photogate 2 as an input

  lcd.init();
  lcd.clear();
  lcd.backlight();
  lcd.setCursor(0, 0);

  Serial.begin(9600);  // for serial monitor
  attachInterrupt(digitalPinToInterrupt(speedometer1), triggerSpeedometer1, RISING); //hardware interrupt when signal changes from low to high (photogate is being intercepted)
  attachInterrupt(digitalPinToInterrupt(speedometer2), triggerSpeedometer2, RISING); //hardware interrupt when signal changes from low to high (photogate is being intercepted)
  
}

void triggerSpeedometer1() {
  time1 = micros(); //get timestamp first photogate is first intercepted
}

void triggerSpeedometer2() {
  time2 = micros();  //get timestamp second photogate is first intercepted
}

void loop() {
  if(time1 != 0 && time2 != 0) { //if both photogates have been intercepted
    lcd.setCursor(0, 0); 
    lcd.print(time1); //print eight digits of time when photogate 1 is intercepted
    lcd.setCursor(8, 0);
    lcd.print(time2); //print eight digits of time when photogate 2 is intercepted
    lcd.setCursor(0, 1);
    lcd.print("Velocity:");
    double timeLapse = (time2 - time1)/1000000.0; // calculate the time elapsed between the two interceptions
    lcd.print(LENGTH/timeLapse); //length/timelapse = velocity (distance/time = rate)
    lcd.print("m/s ");
    delay(20000); // display values for 20s
    time1 = 0; //resetting values for next round
    time2 = 0; //resetting values for next round
    lcd.clear(); //clear screen for next round
  }
}


